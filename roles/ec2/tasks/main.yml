---
- name: Generate SSH key pair for ec2
  ec2_key:
    name: "{{ simplye_instance_name }}"
    region: "{{ aws_region }}"
  register: ec2_key

- name: Save private key to local admins .ssh directory
  copy:
    content: "{{ ec2_key.key.private_key }}"
    dest: "~/.ssh/{{ simplye_instance_name }}.pem"
    mode: 0600
  when: ec2_key.changed

# This is commented out for now because the security role it creates doesn't allow the server to
# go out and get package updates/new packages. The security role and groupID needs to be created manually.
#- name: Create security group for EC2 insance and open SSH port to the ansible control machine
#  ec2_group:
#    name: "EC2-{{ simplye_role }}-{{ simplye_instance_name }}"
#    description: "Firewall rules for the {{ simplye_role }}-{{ simplye_instance_name }} RDS instance"
#    region: "{{ aws_region }}"
#    rules:
#      - proto: tcp
#        from_port: 22
#        to_port: 22
#        cidr_ip: "{{ admin_ip }}/32"
#  register: ec2_sg
#- debug: var=ec2_sg.group_id

- name: Create a new server instance in AWS EC2 if none exist with tag "{{ simplye_role }}-{{ simplye_instance_name }}"
  local_action:
    module: ec2
    wait: yes
    wait_timeout: 600
    region: "{{ aws_region }}"
    instance_type: "{{ ec2_instance_type }}"
    exact_count: 1
    count_tag:
      Name: "{{ simplye_role }}-{{ simplye_instance_name }}"
    instance_tags: '{"Name":"{{ simplye_role }}-{{ simplye_instance_name }}","Type":"{{ simplye_role }}","Environment":"{{ simplye_environment }}"}'
    key_name: "{{ simplye_instance_name }}"
    group_id: "sg-d0b578ab"
    image: "{{ ec2_image }}"
    vpc_subnet_id: "{{ ec2_subnet_ids|random }}"
    assign_public_ip: yes
    volumes:
    - device_name: /dev/xvda
      device_type: gp2
      volume_size: "{{ ec2_volume_size }}"
      delete_on_termination: true
  register: ec2

- debug: var=item
  with_items: "{{ ec2.instances }}"

- name: Add instance to host group in working memory
  add_host: hostname="{{ item.public_ip }}" groupname="{{ simplye_role }}-servers" ansible_ssh_private_key_file="~/.ssh/{{ simplye_instance_name }}.pem"
  with_items:
    - "{{ ec2.instances }}"
    - "{{ ec2.tagged_instances }}"

- name: Check SSH to make sure the instance boots
  wait_for: host={{ item.public_ip }} port=22 delay=60 timeout=320 state=started
  with_items: "{{ ec2.instances }}"

- name: Add instance IPs as playbook facts
  set_fact:
    ec2_ip: "{{ item.public_ip }}"
    ec2_private_ip: "{{ item.private_ip }}"
  with_items:
    - "{{ ec2.instances }}"
    - "{{ ec2.tagged_instances }}"

- debug: var=ec2_private_ip
